{"version":3,"sources":["lib/utils.js","lib/BigListItem.jsx","lib/BigListItemRecycler.js","lib/BigListProcessor.js","lib/BigListSection.jsx","lib/BigList.jsx","lib/index.js","src/lists/components/Block.jsx","src/lists/ColumnsList.jsx","src/lists/CompareList.jsx","src/lists/List.jsx","src/lists/SectionList.jsx","src/Home.jsx","App.js"],"names":["isNumeric","num","isNaN","parseFloat","isFinite","processBlock","containerHeight","scrollTop","batchSizeThreshold","batchSize","blockStart","blockEnd","Math","ceil","max","forEachObjIndexed","fn","obj","keyList","Object","keys","idx","length","key","mergeViewStyle","style","defaultStyle","Array","isArray","concat","push","unshift","createElement","Component","React","isValidElement","BigListItemType","SPACER","HEADER","SECTION_HEADER","ITEM","SECTION_FOOTER","FOOTER","BigListItem","children","height","width","View","propTypes","PropTypes","oneOfType","arrayOf","node","string","number","object","array","defaultProps","memo","BigListItemRecycler","items","this","pendingItems","forEach","item","type","section","index","itemsForType","position","itemKey","lastKey","BigListProcessor","scrollView","sections","headerHeight","footerHeight","sectionHeaderHeight","itemHeight","sectionFooterHeight","insetTop","insetBottom","numColumns","uniform","Number","top","bottom","prevItems","recycler","counter","spacerHeight","isFullRow","isVisible","fullRow","isVisibleBelow","prevHeight","itemsArray","get","pushItem","getSpacerHeight","itemsCounter","reduce","totalHeight","i","getHeaderHeight","rows","getSectionHeaderHeight","initialSpacerHeight","prevSection","getItemHeight","getSectionFooterHeight","getFooterHeight","fill","targetSection","targetIndex","animated","foundIndex","uniformHeight","scrollTo","x","y","BigListSection","nextSectionPosition","scrollTopValue","inputRange","outputRange","collisionPoint","translateY","interpolate","child","Children","only","fillChildren","cloneElement","flex","viewStyle","props","undefined","zIndex","transform","Animated","instanceOf","Value","BigList","self","exclude","filter","some","pattern","test","getAllProperties","properties","Set","getOwnPropertyNames","getOwnPropertySymbols","add","getPrototypeOf","prototype","constructor","descriptor","getOwnPropertyDescriptor","value","bind","autobind","createRef","state","getListState","options","stateProps","data","getSectionLengths","getItemLayout","getItemOffset","current","getNativeScrollRef","sectionLengths","flashScrollIndicators","processor","getListProcessor","scrollToPosition","itemIndex","sectionIndex","scrollToIndex","hasSections","JSON","stringify","map","a","indexOf","offset","scrollRef","event","nativeEvent","contentInset","layoutMeasurement","min","contentOffset","contentSize","nextState","setState","onScroll","onEndReached","onEndReachedThreshold","distanceFromEnd","endReached","layout","onLayout","renderAccessory","onScrollEnd","forceUpdate","total","sectionLength","ListEmptyComponent","ListFooterComponent","ListFooterComponentStyle","ListHeaderComponent","ListHeaderComponentStyle","renderHeader","renderFooter","renderSectionHeader","renderItem","renderSectionFooter","renderEmpty","isEmpty","sectionPositions","getItem","shift","stickySectionHeadersEnabled","Platform","OS","scrollTopValueAttachment","attachNativeEvent","prevProps","Error","detach","renderActionSheetScrollViewWrapper","actionSheetScrollRef","onRefresh","refreshing","wrapper","val","handleScroll","listener","useNativeDriver","refreshControl","RefreshControl","contentContainerStyle","flexDirection","flexWrap","maxWidth","overwriteProps","ref","onMomentumScrollEnd","onScrollEndDrag","scrollViewProps","ScrollView","renderItems","maxHeight","select","web","default","layoutItemHeight","process","PureComponent","any","shape","left","right","func","keyboardDismissMode","keyboardShouldPersistTaps","elementType","element","removeClippedSubviews","bool","isRequired","scrollEventThrottle","styles","StyleSheet","create","block","justifyContent","padding","Block","SectionList","useState","numberColumns","setNumberColumns","SafeAreaView","container","KeyboardAvoidingView","compare","parseInt","title","description","icon","TextInput","label","String","keyboardType","onChangeText","Subheading","StatusBar","CompareList","id","header","FlatList","keyExtractor","paddingTop","Appbar","Content","headerContent","subtitle","elevation","alignItems","containerBottom","marginBottom","row","paddingHorizontal","paddingVertical","Home","useTheme","colors","background","surface","checked","setChecked","setInsetBottom","backgroundColor","paddingBottom","Header","RadioButton","Group","onValueChange","newValue","TouchableRipple","onPress","Paragraph","pointerEvents","Android","App"],"mappings":"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","file":"static/js/app.680e8aaf.chunk.js","sourcesContent":["import React from \"react\";\n\n/**\n * Is numeric.\n * @param {any} num\n * @returns {boolean}\n */\nexport const isNumeric = (num) => {\n  return !isNaN(parseFloat(num)) && isFinite(num);\n};\n\n/**\n * Process block.\n * @param {number} containerHeight\n * @param {number} scrollTop\n * @param {number|null|undefined} batchSizeThreshold\n * @returns {{blockStart: number, batchSize: number, blockEnd: number}}\n */\nexport const processBlock = ({\n  containerHeight,\n  scrollTop,\n  batchSizeThreshold = 1,\n}) => {\n  if (containerHeight === 0) {\n    return {\n      batchSize: 0,\n      blockStart: 0,\n      blockEnd: 0,\n    };\n  }\n  const batchSize = Math.ceil(\n    containerHeight * Math.max(0.5, batchSizeThreshold),\n  );\n  const blockNumber = Math.ceil(scrollTop / batchSize);\n  const blockStart = batchSize * blockNumber;\n  const blockEnd = blockStart + batchSize;\n  return { batchSize, blockStart, blockEnd };\n};\n\n/**\n * For each object indexed.\n * @param {function} fn\n * @param {object} obj\n * @returns {*}\n */\nexport const forEachObjIndexed = (fn, obj) => {\n  const keyList = Object.keys(obj);\n  let idx = 0;\n  while (idx < keyList.length) {\n    const key = keyList[idx];\n    fn(obj[key], key, obj);\n    idx += 1;\n  }\n  return obj;\n};\n\n/**\n * Autobind context to class methods.\n * @param {object} self\n * @returns {{}}\n */\nexport const autobind = (self = {}) => {\n  const exclude = [\n    \"componentWillMount\",\n    \"UNSAFE_componentWillMount\",\n    \"render\",\n    \"getSnapshotBeforeUpdate\",\n    \"componentDidMount\",\n    \"componentWillReceiveProps\",\n    \"UNSAFE_componentWillReceiveProps\",\n    \"shouldComponentUpdate\",\n    \"componentWillUpdate\",\n    \"UNSAFE_componentWillUpdate\",\n    \"componentDidUpdate\",\n    \"componentWillUnmount\",\n    \"componentDidCatch\",\n    \"setState\",\n    \"forceUpdate\",\n  ];\n\n  const filter = (key) => {\n    const match = (pattern) =>\n      typeof pattern === \"string\" ? key === pattern : pattern.test(key);\n    if (exclude) {\n      return !exclude.some(match);\n    }\n    return true;\n  };\n\n  const getAllProperties = (object) => {\n    const properties = new Set();\n    do {\n      for (const key of Object.getOwnPropertyNames(object).concat(\n        Object.getOwnPropertySymbols(object),\n      )) {\n        properties.add([object, key]);\n      }\n    } while (\n      (object = Object.getPrototypeOf(object)) &&\n      object !== Object.prototype\n    );\n    return properties;\n  };\n\n  for (const [object, key] of getAllProperties(self.constructor.prototype)) {\n    if (key === \"constructor\" || !filter(key)) {\n      continue;\n    }\n    const descriptor = Object.getOwnPropertyDescriptor(object, key);\n    if (descriptor && typeof descriptor.value === \"function\") {\n      self[key] = self[key].bind(self);\n    }\n  }\n  return self;\n};\n\n/**\n * Merge styles\n * @param {array|object|null|undefined} style\n * @param {array|object} defaultStyle\n * @returns {*[]}\n */\nexport const mergeViewStyle = (style, defaultStyle = {}) => {\n  if (style == null) {\n    style = defaultStyle;\n  } else if (Array.isArray(style) && Array.isArray(defaultStyle)) {\n    defaultStyle.concat(style);\n    style = defaultStyle;\n  } else if (Array.isArray(defaultStyle)) {\n    defaultStyle.push(style);\n    style = defaultStyle;\n  } else if (Array.isArray(style)) {\n    style.unshift(defaultStyle);\n  } else {\n    style = [defaultStyle, style];\n  }\n  return style;\n};\n\n/**\n * Get element from component.\n * @param {React.node} Component\n * @returns {JSX.Element|[]|*}\n */\nexport const createElement = (Component) => {\n  return Component != null ? (\n    React.isValidElement(Component) ? (\n      Component\n    ) : (\n      <Component />\n    )\n  ) : null;\n};\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { View } from \"react-native\";\n\nimport { mergeViewStyle } from \"./utils\";\n\nexport const BigListItemType = {\n  SPACER: \"spacer\",\n  HEADER: \"header\",\n  SECTION_HEADER: \"section_header\",\n  ITEM: \"item\",\n  SECTION_FOOTER: \"section_footer\",\n  FOOTER: \"footer\",\n};\n\n/**\n * List item.\n * @param {React.node} children\n * @param {array|object|null|undefined} style\n * @param {number} height\n * @param {number} width\n * @returns {JSX.Element}\n * @constructor\n */\nconst BigListItem = ({ children, style, height, width = \"100%\" }) => {\n  return (\n    <View\n      style={mergeViewStyle(style, {\n        height,\n        width,\n      })}\n    >\n      {children}\n    </View>\n  );\n};\n\nBigListItem.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  height: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  width: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n};\n\nBigListItem.defaultProps = {\n  width: \"100%\",\n};\n\nexport default memo(BigListItem);\n","import { BigListItemType } from \"./BigListItem\";\nimport { forEachObjIndexed } from \"./utils\";\n\nclass BigListItemRecycler {\n  static lastKey = 0;\n  /**\n   * Constructor.\n   * @param {object[]} items\n   */\n  constructor(items) {\n    this.items = {};\n    this.pendingItems = {};\n    items.forEach((item) => {\n      const { type, section, index } = item;\n      const [itemsForType] = this.itemsForType(type);\n      itemsForType[`${type}:${section}:${index}`] = item;\n    });\n  }\n\n  /**\n   * Items for type.\n   * @param {any} type\n   * @returns {(*|{}|*[])[]}\n   */\n  itemsForType(type) {\n    return [\n      this.items[type] || (this.items[type] = {}),\n      this.pendingItems[type] || (this.pendingItems[type] = []),\n    ];\n  }\n\n  /**\n   * Get item.\n   * @param {any} type\n   * @param {number} position\n   * @param {number} height\n   * @param {int} section\n   * @param {int} index\n   * @returns {{section: int, position: number, index: number, type: any, key: number, height: int}}\n   */\n  get({ type, position, height, section = 0, index = 0 }) {\n    const [items, pendingItems] = this.itemsForType(type);\n    const itemKey = `${type}:${section}:${index}`;\n    let item = items[itemKey];\n    if (item == null) {\n      item = { type, key: -1, position, height, section, index };\n      pendingItems.push(item);\n    } else {\n      item.position = position;\n      item.height = height;\n      delete items[itemKey];\n    }\n    return item;\n  }\n\n  /**\n   * Fill.\n   */\n  fill() {\n    forEachObjIndexed((type) => {\n      const [items, pendingItems] = this.itemsForType(type);\n      let index = 0;\n      forEachObjIndexed(({ key }) => {\n        const item = pendingItems[index];\n        if (item == null) {\n          return false;\n        }\n        item.key = key;\n        index++;\n      }, items);\n      for (; index < pendingItems.length; index++) {\n        pendingItems[index].key = ++BigListItemRecycler.lastKey;\n      }\n      pendingItems.length = 0;\n    }, BigListItemType);\n  }\n}\nexport default BigListItemRecycler;\n","import { BigListItemType } from \"./BigListItem\";\nimport BigListItemRecycler from \"./BigListItemRecycler\";\nimport { isNumeric } from \"./utils\";\n\nexport default class BigListProcessor {\n  /**\n   * Constructor.\n   * @param {ScrollView} scrollView\n   * @param {array[]|object|null|undefined} sections\n   * @param {number|function|null|undefined} headerHeight\n   * @param {number|function|null|undefined} footerHeight\n   * @param {number|function|null|undefined} sectionHeaderHeight\n   * @param {number|function|null|undefined} itemHeight\n   * @param {number|function|null|undefined} sectionFooterHeight\n   * @param {number|function|null|undefined} insetTop\n   * @param {number|function|null|undefined} insetBottom\n   * @param {number|null|undefined} numColumns\n   */\n  constructor({\n    scrollView,\n    sections,\n    headerHeight,\n    footerHeight,\n    sectionHeaderHeight,\n    itemHeight,\n    sectionFooterHeight,\n    insetTop,\n    insetBottom,\n    numColumns,\n  }) {\n    this.headerHeight = headerHeight;\n    this.footerHeight = footerHeight;\n    this.sectionHeaderHeight = sectionHeaderHeight;\n    this.itemHeight = itemHeight;\n    this.sectionFooterHeight = sectionFooterHeight;\n    this.sections = sections;\n    this.insetTop = insetTop;\n    this.insetBottom = insetBottom;\n    this.uniform = isNumeric(itemHeight);\n    this.scrollView = scrollView;\n    this.numColumns = numColumns;\n  }\n\n  /**\n   * Get item height.\n   * @returns {number|*}\n   */\n  getItemHeight(section, index) {\n    const { itemHeight } = this;\n    return isNumeric(itemHeight)\n      ? Number(itemHeight)\n      : itemHeight(section, index);\n  }\n\n  /**\n   * Get header height.\n   * @returns {number|*}\n   */\n  getHeaderHeight() {\n    const { headerHeight } = this;\n    return isNumeric(headerHeight) ? Number(headerHeight) : headerHeight();\n  }\n\n  /**\n   * Get footer height.\n   * @returns {number|*}\n   */\n  getFooterHeight() {\n    const { footerHeight } = this;\n    return isNumeric(footerHeight) ? Number(footerHeight) : footerHeight();\n  }\n\n  /**\n   * Get section height.\n   * @returns {number|*}\n   */\n  getSectionHeaderHeight(section) {\n    const { sectionHeaderHeight } = this;\n    return isNumeric(sectionHeaderHeight)\n      ? Number(sectionHeaderHeight)\n      : sectionHeaderHeight(section);\n  }\n\n  /**\n   * Get section footer height.\n   * @returns {number|*}\n   */\n  getSectionFooterHeight(section) {\n    const { sectionFooterHeight } = this;\n    return isNumeric(sectionFooterHeight)\n      ? Number(sectionFooterHeight)\n      : sectionFooterHeight(section);\n  }\n\n  /**\n   * Process list items.\n   * @param {number} top\n   * @param {number} bottom\n   * @param {array} prevItems\n   * @returns {{items: [], height: *}}\n   */\n  process(top, bottom, prevItems) {\n    const { sections } = this;\n    const items = [];\n    const recycler = new BigListItemRecycler(prevItems);\n\n    let position;\n    let counter = -1; // Counter of items per row pushed\n    let height = this.insetTop;\n    let spacerHeight = height;\n\n    /**\n     * The width of the row is the entire line.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isFullRow = (item) => {\n      // Only items can be rendered with column format, so all others are full row\n      return item.type !== BigListItemType.ITEM;\n    };\n\n    /**\n     * Is visible below.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isVisibleBelow = (item) => {\n      const { height: itemHeight } = item;\n      const fullRow = isFullRow(item);\n      if (height > bottom) {\n        if (fullRow || counter % this.numColumns === 0) {\n          spacerHeight += itemHeight;\n        }\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    /**\n     * Is the item visible.\n     * @param {object} item\n     * @returns {boolean}\n     */\n    const isVisible = (item) => {\n      // Check section headers visibility below\n      if (item.type === BigListItemType.SECTION_HEADER) {\n        return isVisibleBelow(item);\n      }\n      // Dimensions\n      const { height: itemHeight } = item;\n      const fullRow = isFullRow(item);\n      const prevHeight = height;\n      // Increase or reset counter\n      counter = fullRow ? -1 : counter + 1;\n      if (fullRow || counter % this.numColumns === 0) {\n        height += itemHeight;\n      }\n      // Check if is visible\n      if (height < top || prevHeight > bottom) {\n        if (fullRow || counter % this.numColumns === 0) {\n          spacerHeight += itemHeight;\n        }\n        return false;\n      } else {\n        return true;\n      }\n    };\n\n    /**\n     * Get recycled views and push items.\n     * @param {object} itemsArray\n     */\n    const push = (...itemsArray) => {\n      itemsArray.forEach((item) => {\n        items.push(recycler.get(item));\n      });\n    };\n\n    /**\n     * Push the item when is visible.\n     * @param {object} item\n     */\n    const pushItem = (item) => {\n      if (isVisible(item)) {\n        if (spacerHeight > 0) {\n          push({\n            type: BigListItemType.SPACER,\n            position: item.position - spacerHeight,\n            height: spacerHeight,\n            section: item.section,\n            index: item.index,\n          });\n          spacerHeight = 0;\n        }\n        push(item);\n      }\n    };\n\n    /**\n     * Calculate spacer height.\n     */\n    const getSpacerHeight = () => {\n      let itemsCounter = -1;\n      items.reduce((totalHeight, item, i) => {\n        if (i !== items.length - 1) {\n          const fullRow = isFullRow(item);\n          itemsCounter = fullRow ? 0 : itemsCounter + 1;\n          if (fullRow || itemsCounter % this.numColumns === 0) {\n            return totalHeight + item.height;\n          }\n        }\n        return totalHeight;\n      }, 0);\n    };\n\n    // Header\n    const headerHeight = this.getHeaderHeight();\n    if (headerHeight > 0) {\n      position = height;\n      pushItem({\n        type: BigListItemType.HEADER,\n        position: position,\n        height: headerHeight,\n      });\n    }\n    // Sections\n    for (let section = 0; section < sections.length; section++) {\n      const rows = sections[section];\n      if (rows === 0) {\n        continue;\n      }\n      // Section Header\n      const sectionHeaderHeight = this.getSectionHeaderHeight(section);\n      position = height;\n      height += sectionHeaderHeight;\n      if (\n        section > 1 &&\n        items.length > 0 &&\n        items[items.length - 1].type === BigListItemType.SECTION_HEADER\n      ) {\n        // Top Spacer\n        const initialSpacerHeight = getSpacerHeight();\n        const prevSection = items[items.length - 1];\n        push(\n          {\n            type: BigListItemType.SPACER,\n            position: 0,\n            height: initialSpacerHeight,\n            section: prevSection.section,\n            index: 0,\n          },\n          prevSection,\n        );\n      }\n      pushItem({\n        type: BigListItemType.SECTION_HEADER,\n        position: position,\n        height: sectionHeaderHeight,\n        section: section,\n      });\n      // Items\n      let itemHeight = this.getItemHeight(section);\n      for (let index = 0; index < rows; index++) {\n        if (!this.uniform) {\n          itemHeight = this.getItemHeight(section, index);\n        }\n        position = height;\n        pushItem({\n          type: BigListItemType.ITEM,\n          position: position,\n          height: itemHeight,\n          section: section,\n          index: index,\n        });\n      }\n      // Section Footer\n      const sectionFooterHeight = this.getSectionFooterHeight(section);\n      if (sectionFooterHeight > 0) {\n        position = height;\n        pushItem({\n          type: BigListItemType.SECTION_FOOTER,\n          position: position,\n          height: sectionFooterHeight,\n          section: section,\n        });\n      }\n    }\n    // Footer\n    const footerHeight = this.getFooterHeight();\n    if (footerHeight > 0) {\n      position = height;\n      pushItem({\n        type: BigListItemType.FOOTER,\n        position: position,\n        height: footerHeight,\n      });\n    }\n    // Bottom Spacer\n    height += this.insetBottom;\n    spacerHeight += this.insetBottom;\n    if (spacerHeight > 0) {\n      push({\n        type: BigListItemType.SPACER,\n        position: height - spacerHeight,\n        height: spacerHeight,\n        section: sections.length,\n      });\n    }\n    recycler.fill();\n    return {\n      height,\n      items,\n    };\n  }\n\n  /**\n   * Scroll to position.\n   * @param {int} targetSection\n   * @param {int} targetIndex\n   * @param {boolean} animated\n   */\n  scrollToPosition(targetSection, targetIndex, animated) {\n    const { sections, insetTop } = this;\n    let scrollTop = insetTop + this.getHeaderHeight();\n    let section = 0;\n    let foundIndex = false;\n    while (section <= targetSection) {\n      const rows = Math.ceil(sections[section] / this.numColumns);\n      if (rows === 0) {\n        section += 1;\n        continue;\n      }\n      scrollTop += this.getSectionHeaderHeight(section);\n      if (this.uniform) {\n        const uniformHeight = this.getItemHeight(section);\n        if (section === targetSection) {\n          scrollTop += uniformHeight * Math.ceil(targetIndex / this.numColumns);\n          foundIndex = true;\n        } else {\n          scrollTop += uniformHeight * rows;\n        }\n      } else {\n        for (let index = 0; index < rows; index++) {\n          if (\n            section < targetSection ||\n            (section === targetSection && index < targetIndex)\n          ) {\n            scrollTop += this.getItemHeight(\n              section,\n              Math.ceil(index / this.numColumns),\n            );\n          } else if (section === targetSection && index === targetIndex) {\n            foundIndex = true;\n            break;\n          }\n        }\n      }\n      if (!foundIndex) {\n        scrollTop += this.getSectionFooterHeight(section);\n      }\n      section += 1;\n    }\n    this.scrollView.scrollTo({\n      x: 0,\n      y: Math.max(0, scrollTop - this.getSectionHeaderHeight(targetSection)),\n      animated,\n    });\n    return true;\n  }\n}\n","import React, { memo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Animated } from \"react-native\";\n\n/**\n * List section.\n * @param {number} position\n * @param {number} height\n * @param {number} nextSectionPosition\n * @param {Animated.Value} scrollTopValue\n * @param {React.node} children\n * @returns {JSX.Element}\n * @constructor\n */\nconst BigListSection = ({\n  position,\n  height,\n  nextSectionPosition,\n  scrollTopValue,\n  children,\n}) => {\n  const inputRange = [-1, 0];\n  const outputRange = [0, 0];\n  inputRange.push(position);\n  outputRange.push(0);\n  const collisionPoint = (nextSectionPosition || 0) - height;\n  if (collisionPoint >= position) {\n    inputRange.push(collisionPoint, collisionPoint + 1);\n    outputRange.push(collisionPoint - position, collisionPoint - position);\n  } else {\n    inputRange.push(position + 1);\n    outputRange.push(1);\n  }\n  const translateY = scrollTopValue.interpolate({\n    inputRange,\n    outputRange,\n  });\n  const child = React.Children.only(children);\n  const fillChildren =\n    React.isValidElement(child) &&\n    React.cloneElement(child, {\n      style: { flex: 1 },\n    });\n  const viewStyle = [\n    React.isValidElement(child) && child.props.style\n      ? child.props.style\n      : undefined,\n    {\n      zIndex: 10,\n      height: height,\n      width: \"100%\",\n      transform: [{ translateY }],\n    },\n  ];\n  return <Animated.View style={viewStyle}>{fillChildren}</Animated.View>;\n};\n\nBigListSection.propTypes = {\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]),\n  height: PropTypes.number,\n  nextSectionPosition: PropTypes.number,\n  position: PropTypes.number,\n  scrollTopValue: PropTypes.instanceOf(Animated.Value),\n};\n\nexport default memo(BigListSection);\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Animated,\n  Platform,\n  RefreshControl,\n  ScrollView,\n  View,\n} from \"react-native\";\n\nimport BigListItem, { BigListItemType } from \"./BigListItem\";\nimport BigListProcessor from \"./BigListProcessor\";\nimport BigListSection from \"./BigListSection\";\nimport { autobind, createElement, mergeViewStyle, processBlock } from \"./utils\";\n\nclass BigList extends PureComponent {\n  /**\n   * Constructor.\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n    autobind(this);\n    // Initialize properties and state\n    this.containerHeight = 0;\n    this.scrollTop = 0;\n    this.scrollTopValue = this.props.scrollTopValue || new Animated.Value(0);\n    this.scrollView = React.createRef();\n    this.state = this.getListState();\n  }\n\n  /**\n   * Get list state.\n   * @param {array} data\n   * @param {array[]|object|null|undefined} sections\n   * @param {array} prevItems\n   * @param {number|null} batchSizeThreshold\n   * @param {number|function|null|undefined} headerHeight\n   * @param {number|function|null|undefined} footerHeight\n   * @param {number|function|null|undefined} sectionHeaderHeight\n   * @param {number|function|null|undefined} itemHeight\n   * @param {number|function|null|undefined} sectionFooterHeight\n   * @param {number|null|undefined} insetTop\n   * @param {number|null|undefined} insetBottom\n   * @param {number|null|undefined} numColumns\n   * @param {number|null|undefined} batchSize\n   * @param {number|null|undefined} blockStart\n   * @param {number|null|undefined} blockEnd\n   * @param {function|null|undefined} getItemLayout\n   * @returns {{blockStart: *, batchSize: *, blockEnd: *, items: [], height: *}|{blockStart, batchSize, blockEnd, items: [], height: *}}\n   */\n  static getListState(\n    {\n      data,\n      sections,\n      batchSizeThreshold,\n      headerHeight,\n      footerHeight,\n      sectionHeaderHeight,\n      itemHeight,\n      sectionFooterHeight,\n      insetTop,\n      insetBottom,\n      numColumns,\n      getItemLayout,\n    },\n    { batchSize, blockStart, blockEnd, items: prevItems },\n  ) {\n    if (batchSize === 0) {\n      return {\n        batchSize,\n        blockStart,\n        blockEnd,\n        height: insetTop + insetBottom,\n        items: [],\n      };\n    }\n    const self = BigList;\n    const layoutItemHeight = self.getItemHeight(itemHeight, getItemLayout);\n    const sectionLengths = self.getSectionLengths(sections, data);\n    const processor = new BigListProcessor({\n      sections: sectionLengths,\n      itemHeight: layoutItemHeight,\n      headerHeight,\n      footerHeight,\n      sectionHeaderHeight,\n      sectionFooterHeight,\n      insetTop,\n      insetBottom,\n      numColumns,\n    });\n    return {\n      ...{\n        batchSize,\n        blockStart,\n        blockEnd,\n      },\n      ...processor.process(\n        blockStart - batchSize,\n        blockEnd + batchSize,\n        prevItems || [],\n      ),\n    };\n  }\n\n  /**\n   * Get list state\n   * @param {object} props\n   * @param {object} options.\n   * @return {{blockStart: *, batchSize: *, blockEnd: *, items: *[], height: *}|{blockStart, batchSize, blockEnd, items: *[], height: *}}\n   */\n  getListState(props, options) {\n    const stateProps = props || this.props;\n    return this.constructor.getListState(\n      stateProps,\n      options ||\n        processBlock({\n          containerHeight: this.containerHeight,\n          scrollTop: this.scrollTop,\n          batchSizeThreshold: stateProps.batchSizeThreshold,\n        }),\n    );\n  }\n\n  /**\n   * Get sections item lengths.\n   * @param {array[]|object<string, object>|null|undefined} sections\n   * @param {array} data\n   * @returns {int[]}\n   */\n  static getSectionLengths(sections = null, data = null) {\n    if (sections !== null) {\n      return sections.map((section) => {\n        return section.length;\n      });\n    }\n    return [data?.length];\n  }\n\n  /**\n   * Get sections item lengths.\n   * @returns {int[]}\n   */\n  getSectionLengths() {\n    const { sections, data } = this.props;\n    return this.constructor.getSectionLengths(sections, data);\n  }\n\n  /**\n   * Get item height.\n   * @param {number} itemHeight\n   * @param {function|null|undefined} getItemLayout\n   * @return {null|*}\n   */\n  static getItemHeight(itemHeight, getItemLayout) {\n    if (getItemLayout) {\n      const itemLayout = getItemLayout([], 0);\n      return itemLayout.length;\n    }\n    if (itemHeight) {\n      return itemHeight;\n    }\n    return null;\n  }\n\n  /**\n   * Get item height.\n   * @return {null|*}\n   */\n  getItemHeight() {\n    const { itemHeight, getItemLayout } = this.props;\n    return this.constructor.getItemHeight(itemHeight, getItemLayout);\n  }\n\n  /**\n   * Is item visible.\n   * @param {int} index\n   * @param {int} section\n   * @returns {boolean}\n   */\n  isVisible({ index, section = 0 }) {\n    const position = this.getItemOffset({ index, section });\n    return (\n      position >= this.scrollTop &&\n      position <= this.scrollTop + this.containerHeight\n    );\n  }\n\n  /**\n   * Provides a reference to the underlying scroll component.\n   * @returns {ScrollView|null}\n   */\n  getNativeScrollRef() {\n    return this.scrollView.current;\n  }\n\n  /**\n   * Get list processor,\n   * @returns {BigListProcessor}\n   */\n  getListProcessor() {\n    const scrollView = this.getNativeScrollRef();\n    if (scrollView != null) {\n      const {\n        headerHeight,\n        footerHeight,\n        sectionHeaderHeight,\n        sectionFooterHeight,\n        insetTop,\n        insetBottom,\n      } = this.props;\n      const itemHeight = this.getItemHeight();\n      const sectionLengths = this.getSectionLengths();\n      return new BigListProcessor({\n        sections: sectionLengths,\n        headerHeight,\n        footerHeight,\n        sectionHeaderHeight,\n        sectionFooterHeight,\n        itemHeight,\n        insetTop,\n        insetBottom,\n        scrollView,\n      });\n    }\n    return null;\n  }\n\n  /**\n   * Displays the scroll indicators momentarily.\n   */\n  flashScrollIndicators() {\n    const scrollView = this.getNativeScrollRef();\n    if (scrollView != null) {\n      scrollView.flashScrollIndicators();\n    }\n  }\n\n  /**\n   * Scrolls to a given x, y offset, either immediately, with a smooth animation.\n   * @param {int} x\n   * @param {int} y\n   * @param {bool} animated\n   */\n  scrollTo({ x = 0, y = 0, animated = true }) {\n    const scrollView = this.getNativeScrollRef();\n    if (scrollView != null) {\n      scrollView.scrollTo({\n        x: x,\n        y: y,\n        animated,\n      });\n    }\n  }\n\n  /**\n   * Scroll to index.\n   * @param {int} index\n   * @param {int} section\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToIndex({ index, section = 0, animated = true }) {\n    const processor = this.getListProcessor();\n    if (processor != null && index != null && section != null) {\n      return processor.scrollToPosition(section, index, animated);\n    }\n    return false;\n  }\n\n  /**\n   * Alias to scrollToIndex with polyfill for SectionList.\n   * @see scrollToIndex\n   * @param {int} itemIndex\n   * @param {int} sectionIndex\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToLocation({ itemIndex, sectionIndex, animated = true }) {\n    return this.scrollToIndex({\n      section: sectionIndex,\n      index: itemIndex,\n      animated,\n    });\n  }\n\n  /**\n   * Scroll to item.\n   * @param {object} item\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToItem({ item, animated = false }) {\n    let index;\n    if (this.hasSections()) {\n      const coords = JSON.stringify(\n        this.map((a) => {\n          return a[0] + \"|\" + a[1];\n        }),\n      );\n      index = coords.indexOf(item[0] + \"|\" + item[1]) !== -1;\n    } else {\n      index = this.props.data.indexOf(item);\n    }\n    return this.scrollTo({ index, animated });\n  }\n\n  /**\n   * Scroll to offset.\n   * @param {number} offset\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToOffset({ offset, animated = false }) {\n    const scrollRef = this.getNativeScrollRef();\n    if (scrollRef != null) {\n      scrollRef.scrollTo({\n        x: 0,\n        y: offset,\n        animated,\n      });\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * Scroll to top.\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToTop({ animated = true }) {\n    return this.scrollTo({ section: 0, index: 0, animated });\n  }\n\n  /**\n   * Scroll to end.\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToEnd({ animated = true }) {\n    const { data } = this.props;\n    let section = 0;\n    let index = 0;\n    if (this.hasSections()) {\n      const sectionLengths = this.getSectionLengths();\n      section = sectionLengths[sectionLengths.length - 1];\n    } else {\n      index = data.length;\n    }\n    return this.scrollTo({ section, index, animated });\n  }\n\n  /**\n   * Scroll to section.\n   * @param {int} section\n   * @param {bool} animated\n   * @returns {bool}\n   */\n  scrollToSection({ section, animated = true }) {\n    return this.scrollTo({ index: 0, section, animated });\n  }\n\n  /**\n   * Handle scroll.\n   * @param event\n   */\n  onScroll(event) {\n    const { nativeEvent } = event;\n    const { contentInset, batchSizeThreshold } = this.props;\n    this.containerHeight =\n      nativeEvent.layoutMeasurement.height -\n      (contentInset.top || 0) -\n      (contentInset.bottom || 0);\n    this.scrollTop = Math.min(\n      Math.max(0, nativeEvent.contentOffset.y),\n      nativeEvent.contentSize.height - this.containerHeight,\n    );\n    const nextState = processBlock({\n      containerHeight: this.containerHeight,\n      scrollTop: this.scrollTop,\n      batchSizeThreshold,\n    });\n    if (\n      nextState.batchSize !== this.state.batchSize ||\n      nextState.blockStart !== this.state.blockStart ||\n      nextState.blockEnd !== this.state.blockEnd\n    ) {\n      this.setState(nextState);\n    }\n    const { onScroll, onEndReached, onEndReachedThreshold } = this.props;\n    if (onScroll != null) {\n      onScroll(event);\n    }\n    const { layoutMeasurement, contentOffset, contentSize } = nativeEvent;\n    const distanceFromEnd =\n      contentSize.height - (layoutMeasurement.height + contentOffset.y);\n    if (distanceFromEnd <= layoutMeasurement.height * onEndReachedThreshold) {\n      if (!this.endReached) {\n        this.endReached = true;\n        onEndReached && onEndReached({ distanceFromEnd });\n      }\n    } else {\n      this.endReached = false;\n    }\n  }\n\n  /**\n   * Handle layout.\n   * @param event\n   */\n  onLayout(event) {\n    const { nativeEvent } = event;\n    const { contentInset, batchSizeThreshold } = this.props;\n    this.containerHeight =\n      nativeEvent.layout.height -\n      (contentInset.top || 0) -\n      (contentInset.bottom || 0);\n    const nextState = processBlock({\n      containerHeight: this.containerHeight,\n      scrollTop: this.scrollTop,\n      batchSizeThreshold,\n    });\n    if (\n      nextState.batchSize !== this.state.batchSize ||\n      nextState.blockStart !== this.state.blockStart ||\n      nextState.blockEnd !== this.state.blockEnd\n    ) {\n      this.setState(nextState);\n    }\n    const { onLayout } = this.props;\n    if (onLayout != null) {\n      onLayout(event);\n    }\n  }\n\n  /**\n   * Handle scroll end.\n   * @param event\n   */\n  onScrollEnd(event) {\n    const { renderAccessory, onScrollEnd } = this.props;\n    if (renderAccessory != null) {\n      this.forceUpdate();\n    }\n    if (onScrollEnd) {\n      onScrollEnd(event);\n    }\n  }\n\n  /**\n   * Is empty\n   * @returns {boolean}\n   */\n  isEmpty() {\n    const sectionLengths = this.getSectionLengths();\n    const length = sectionLengths.reduce((total, sectionLength) => {\n      return total + sectionLength;\n    }, 0);\n    return length === 0;\n  }\n\n  /**\n   * Get derived state.\n   * @param props\n   * @param state\n   * @returns {{blockStart: *, batchSize: *, blockEnd: *, items: *[], height: *}|{blockStart, batchSize, blockEnd, items: *[], height: *}}\n   */\n  static getDerivedStateFromProps(props, state) {\n    return BigList.getListState(props, state);\n  }\n\n  /**\n   * Has sections.\n   * @returns {boolean}\n   */\n  hasSections() {\n    return this.props.sections !== null;\n  }\n\n  /**\n   * Get item scroll view offset.\n   * @param {int} section\n   * @param {int} index\n   * @returns {*}\n   */\n  getItemOffset({ section = 0, index }) {\n    const {\n      insetTop,\n      headerHeight,\n      sectionHeaderHeight,\n      sectionFooterHeight,\n      itemHeight,\n    } = this.props;\n    const headers = this.hasSections() ? section + 1 : 1;\n    return (\n      insetTop +\n      headerHeight +\n      headers * sectionHeaderHeight +\n      section * sectionFooterHeight +\n      index * itemHeight\n    );\n  }\n\n  /**\n   * Get item data.\n   * @param {int} section\n   * @param {int} index\n   * @returns {*}\n   */\n  getItem({ index, section = 0 }) {\n    if (this.hasSections()) {\n      return this.props.sections[section][index];\n    } else {\n      return this.props.data[index];\n    }\n  }\n\n  /**\n   * Get items data.\n   * @returns {*}\n   */\n  getItems() {\n    return this.hasSections() ? this.props.sections : this.props.data;\n  }\n\n  /**\n   * Render all list items.\n   * @returns {[]|*}\n   */\n  renderItems() {\n    const {\n      numColumns,\n      ListEmptyComponent,\n      ListFooterComponent,\n      ListFooterComponentStyle,\n      ListHeaderComponent,\n      ListHeaderComponentStyle,\n      renderHeader,\n      renderFooter,\n      renderSectionHeader,\n      renderItem,\n      renderSectionFooter,\n      renderEmpty,\n    } = this.props;\n    const { items = [] } = this.state;\n    if (this.isEmpty()) {\n      if (ListEmptyComponent != null) {\n        return createElement(ListHeaderComponent);\n      }\n      if (renderEmpty != null) {\n        return renderEmpty();\n      }\n    }\n    const sectionPositions = [];\n    items.forEach(({ type, position }) => {\n      if (type === BigListItemType.SECTION_HEADER) {\n        sectionPositions.push(position);\n      }\n    });\n    const children = [];\n    items.forEach(({ type, key, position, height, section, index }) => {\n      let child;\n      let style;\n      const itemKey = key || position; // Fallback fix\n      switch (type) {\n        case BigListItemType.HEADER:\n          if (ListHeaderComponent != null) {\n            child = createElement(ListHeaderComponent);\n            style = mergeViewStyle({ width: \"100%\" }, ListHeaderComponentStyle);\n          } else {\n            child = renderHeader();\n            style = { width: \"100%\" };\n          }\n        // falls through\n        case BigListItemType.FOOTER:\n          if (type === BigListItemType.FOOTER) {\n            if (ListFooterComponent != null) {\n              child = createElement(ListFooterComponent);\n              style = mergeViewStyle(\n                { width: \"100%\" },\n                ListFooterComponentStyle,\n              );\n            } else {\n              child = renderFooter();\n              style = { width: \"100%\" };\n            }\n          }\n        // falls through\n        case BigListItemType.SECTION_FOOTER:\n          if (type === BigListItemType.SECTION_FOOTER) {\n            child = renderSectionFooter(section);\n            style = { width: \"100%\" };\n          }\n        // falls through\n        case BigListItemType.ITEM:\n          if (type === BigListItemType.ITEM) {\n            const item = this.getItem({ section, index });\n            if (this.hasSections()) {\n              child = renderItem({ item, section, index });\n            } else {\n              child = renderItem({ item, index });\n            }\n          }\n          if (child != null) {\n            children.push(\n              <BigListItem\n                key={itemKey}\n                height={height}\n                width={100 / numColumns + \"%\"}\n                style={style}\n              >\n                {child}\n              </BigListItem>,\n            );\n          }\n          break;\n        case BigListItemType.SPACER:\n          children.push(<BigListItem key={itemKey} height={height} />);\n          break;\n        case BigListItemType.SECTION_HEADER:\n          sectionPositions.shift();\n          child = renderSectionHeader(section);\n          if (child != null) {\n            children.push(\n              <BigListSection\n                key={itemKey}\n                height={height}\n                position={position}\n                nextSectionPosition={sectionPositions[0]}\n                scrollTopValue={this.scrollTopValue}\n              >\n                {child}\n              </BigListSection>,\n            );\n          }\n          break;\n      }\n    });\n    return children;\n  }\n\n  /**\n   * Component did mount.\n   */\n  componentDidMount() {\n    const { stickySectionHeadersEnabled } = this.props;\n    const scrollView = this.getNativeScrollRef();\n    if (\n      stickySectionHeadersEnabled &&\n      scrollView != null &&\n      Platform.OS !== \"web\"\n    ) {\n      // Disabled on web\n      this.scrollTopValueAttachment = Animated.attachNativeEvent(\n        scrollView,\n        \"onScroll\",\n        [{ nativeEvent: { contentOffset: { y: this.scrollTopValue } } }],\n      );\n    }\n  }\n\n  /**\n   * Component did update.\n   * @param prevProps\n   */\n  componentDidUpdate(prevProps) {\n    if (prevProps.scrollTopValue !== this.props.scrollTopValue) {\n      throw new Error(\"scrollTopValue cannot changed after mounting\");\n    }\n  }\n\n  /**\n   * Component will unmount.\n   */\n  componentWillUnmount() {\n    if (this.scrollTopValueAttachment != null) {\n      this.scrollTopValueAttachment.detach();\n    }\n  }\n\n  /**\n   * Render.\n   * @returns {JSX.Element}\n   */\n  render() {\n    // Reduce list properties\n    const {\n      data,\n      sections,\n      scrollTopValue,\n      renderHeader,\n      renderFooter,\n      renderSectionHeader,\n      renderItem,\n      renderSectionFooter,\n      renderActionSheetScrollViewWrapper,\n      renderEmpty,\n      renderAccessory,\n      itemHeight,\n      footerHeight,\n      headerHeight,\n      sectionHeaderHeight,\n      sectionFooterHeight,\n      insetTop,\n      insetBottom,\n      actionSheetScrollRef,\n      stickySectionHeadersEnabled,\n      onEndReached,\n      onEndReachedThreshold,\n      onRefresh,\n      refreshing,\n      ...props\n    } = this.props;\n\n    const wrapper = renderActionSheetScrollViewWrapper || ((val) => val);\n    const handleScroll =\n      stickySectionHeadersEnabled && Platform.OS === \"web\"\n        ? Animated.event(\n            [{ nativeEvent: { contentOffset: { y: this.scrollTopValue } } }],\n            {\n              listener: (event) => this.onScroll(event),\n              useNativeDriver: false,\n            },\n          )\n        : this.onScroll;\n\n    const defaultProps = {\n      refreshControl:\n        onRefresh && !this.props.refreshControl ? (\n          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />\n        ) : null,\n      contentContainerStyle: {\n        flexDirection: \"row\",\n        flexWrap: \"wrap\",\n        maxWidth: \"100%\",\n      },\n    };\n\n    const overwriteProps = {\n      ref: (ref) => {\n        this.scrollView.current = ref;\n        if (actionSheetScrollRef) {\n          actionSheetScrollRef.current = ref;\n        }\n      },\n      onScroll: handleScroll,\n      onLayout: this.onLayout,\n      onMomentumScrollEnd: this.onScrollEnd,\n      onScrollEndDrag: this.onScrollEnd,\n    };\n\n    const scrollViewProps = {\n      ...defaultProps,\n      ...props,\n      ...overwriteProps,\n    };\n\n    // Content container style merge\n    scrollViewProps.contentContainerStyle = mergeViewStyle(\n      props.contentContainerStyle,\n      defaultProps.contentContainerStyle,\n    );\n\n    const scrollView = wrapper(\n      <ScrollView {...scrollViewProps}>{this.renderItems()}</ScrollView>,\n    );\n    return (\n      <View\n        style={{\n          flex: 1,\n          maxHeight: Platform.select({ web: \"100vh\", default: \"100%\" }),\n        }}\n      >\n        {scrollView}\n        {renderAccessory != null ? renderAccessory(this) : null}\n      </View>\n    );\n  }\n}\n\nBigList.propTypes = {\n  actionSheetScrollRef: PropTypes.any,\n  batchSizeThreshold: PropTypes.number,\n  bottom: PropTypes.number,\n  numColumns: PropTypes.number,\n  contentInset: PropTypes.shape({\n    bottom: PropTypes.number,\n    left: PropTypes.number,\n    right: PropTypes.number,\n    top: PropTypes.number,\n  }),\n  data: PropTypes.array,\n  footerHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  getItemLayout: PropTypes.func,\n  headerHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  insetBottom: PropTypes.number,\n  insetTop: PropTypes.number,\n  itemHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  keyboardDismissMode: PropTypes.string,\n  keyboardShouldPersistTaps: PropTypes.string,\n  ListEmptyComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  ListFooterComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  ListFooterComponentStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  ListHeaderComponent: PropTypes.oneOfType([\n    PropTypes.elementType,\n    PropTypes.element,\n    PropTypes.node,\n  ]),\n  ListHeaderComponentStyle: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  onEndReached: PropTypes.func,\n  onEndReachedThreshold: PropTypes.number,\n  onLayout: PropTypes.func,\n  onRefresh: PropTypes.func,\n  onScroll: PropTypes.func,\n  onScrollEnd: PropTypes.func,\n  removeClippedSubviews: PropTypes.bool,\n  renderAccessory: PropTypes.func,\n  renderActionSheetScrollViewWrapper: PropTypes.func,\n  renderEmpty: PropTypes.func,\n  renderFooter: PropTypes.func,\n  renderHeader: PropTypes.func,\n  renderItem: PropTypes.func.isRequired,\n  renderSectionHeader: PropTypes.func,\n  renderSectionFooter: PropTypes.func,\n  refreshing: PropTypes.bool,\n  scrollEventThrottle: PropTypes.number,\n  scrollTopValue: PropTypes.number,\n  sectionFooterHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  sectionHeaderHeight: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n  ]),\n  sections: PropTypes.array,\n  stickySectionHeadersEnabled: PropTypes.bool,\n};\n\nBigList.defaultProps = {\n  // Data\n  data: [],\n  sections: null,\n  refreshing: false,\n  batchSizeThreshold: 1,\n  numColumns: 1,\n  // Renders\n  renderItem: () => null,\n  renderHeader: () => null,\n  renderFooter: () => null,\n  renderSectionHeader: () => null,\n  renderSectionFooter: () => null,\n  // Height\n  itemHeight: 50,\n  headerHeight: 0,\n  footerHeight: 0,\n  sectionHeaderHeight: 0,\n  sectionFooterHeight: 0,\n  // Scroll\n  stickySectionHeadersEnabled: true,\n  removeClippedSubviews: false,\n  scrollEventThrottle: Platform.OS === \"web\" ? 5 : 16,\n  // Keyboard\n  keyboardShouldPersistTaps: \"always\",\n  keyboardDismissMode: \"interactive\",\n  // Insets\n  insetTop: 0,\n  insetBottom: 0,\n  contentInset: { top: 0, right: 0, left: 0, bottom: 0 },\n  onEndReachedThreshold: 0,\n};\n\nexport default BigList;\n","import BigList from \"./BigList\";\n\nexport default BigList;\n","import React from \"react\";\nimport { StyleSheet, View } from \"react-native\";\n\nconst Block = (props) => {\n  return <View {...props} style={styles.block} />;\n};\n\nconst styles = StyleSheet.create({\n  block: {\n    flex: 1,\n    justifyContent: \"center\",\n    padding: 10,\n  },\n});\n\nexport default Block;\n","import React, { useState } from \"react\";\nimport {\n  KeyboardAvoidingView,\n  SafeAreaView,\n  StyleSheet,\n  View,\n} from \"react-native\";\nimport { List, Subheading, TextInput } from \"react-native-paper\";\nimport { StatusBar } from \"expo-status-bar\";\n\nimport BigList from \"../../lib\";\nimport data from \"../data/data.json\";\nimport Block from \"./components/Block\";\n\nexport default function SectionList() {\n  const [numberColumns, setNumberColumns] = useState(3);\n  const renderItem = ({ item }) => {\n    return (\n      <List.Item\n        title={item.title}\n        description={item.description}\n        style={styles.container}\n        left={(props) => <List.Icon {...props} icon=\"account\" />}\n      />\n    );\n  };\n  const renderEmpty = () => <List.Item title=\"No items\" />;\n  const renderHeader = () => (\n    <View>\n      <TextInput\n        label=\"Number of columns (max 10)\"\n        value={String(numberColumns)}\n        type=\"numeric\"\n        keyboardType=\"numeric\"\n        onChangeText={(value) => {\n          const num = parseInt(value, 10) || \"\";\n          setNumberColumns(num);\n        }}\n      />\n    </View>\n  );\n  const renderFooter = () => (\n    <Block>\n      <Subheading>No more items available...</Subheading>\n    </Block>\n  );\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView style={styles.container}>\n        <View style={styles.compare}>\n          <BigList\n            style={styles.container}\n            data={data}\n            numColumns={Math.min(\n              Math.max(parseInt(numberColumns, 10) || 1, 1),\n              10,\n            )}\n            // Item\n            itemHeight={90}\n            renderItem={renderItem}\n            renderEmpty={renderEmpty}\n            // Header\n            headerHeight={90}\n            renderHeader={renderHeader}\n            // Footer\n            footerHeight={100}\n            renderFooter={renderFooter}\n          />\n        </View>\n        <StatusBar style=\"auto\" />\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  compare: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flex: 1,\n  },\n});\n","/* eslint-disable no-shadow */\nimport React from \"react\";\nimport {\n  FlatList,\n  KeyboardAvoidingView,\n  Platform,\n  SafeAreaView,\n  StyleSheet,\n  View,\n} from \"react-native\";\nimport BigList from \"../../lib\";\nimport { List, Subheading } from \"react-native-paper\";\nimport { StatusBar } from \"expo-status-bar\";\n\nimport data from \"../data/data.json\";\nimport Block from \"./components/Block\";\n\nconst ITEM_HEIGHT = 50;\n\nexport default function CompareList() {\n  const renderItem = ({ item }) => {\n    return (\n      <List.Item\n        title={item.id + \" - \" + item.title}\n        description={item.description}\n        style={styles.item}\n        left={(props) => <List.Icon {...props} icon=\"account\" />}\n      />\n    );\n  };\n  const renderEmpty = () => <List.Item title=\"No items\" />;\n\n  const renderBigHeader = () => (\n    <List.Item\n      title=\"BigList\"\n      description=\"react-native-big-list\"\n      style={styles.header}\n    />\n  );\n  const renderFlatHeader = () => (\n    <List.Item\n      title=\"FlatList\"\n      description=\"react-native\"\n      style={styles.header}\n    />\n  );\n  const renderFooter = () => (\n    <Block>\n      <Subheading>No more items available...</Subheading>\n    </Block>\n  );\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView style={styles.container}>\n        <View style={styles.compare}>\n          <BigList\n            style={[\n              styles.container,\n              Platform.select({ web: { maxHeight: \"100vh\" }, default: {} }),\n            ]}\n            data={data}\n            renderItem={renderItem}\n            getItemLayout={(data, index) => ({\n              length: ITEM_HEIGHT,\n              offset: ITEM_HEIGHT * index,\n              index,\n            })}\n            ListHeaderComponent={renderBigHeader}\n            ListFooterComponent={renderFooter}\n            ListEmptyComponent={renderEmpty}\n            headerHeight={100} // Default 0, need to specify the header height\n            footerHeight={100} // Default 0, need to specify the footer  height\n          />\n          <FlatList\n            style={[\n              styles.container,\n              Platform.select({ web: { maxHeight: \"100vh\" }, default: {} }),\n            ]}\n            data={data}\n            renderItem={renderItem}\n            getItemLayout={(data, index) => ({\n              length: ITEM_HEIGHT,\n              offset: ITEM_HEIGHT * index,\n              index,\n            })} // Replaceable with `itemHeight={ITEM_HEIGHT}`\n            ListHeaderComponent={renderFlatHeader} // Replaceable with `renderHeader`\n            ListFooterComponent={renderFooter} // Replaceable with `renderFooter`\n            ListEmptyComponent={renderEmpty} // Replaceable with `renderEmpty`\n            keyExtractor={(item) => String(item.id)} // Removable\n          />\n        </View>\n        <StatusBar style=\"auto\" />\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  compare: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flex: 1,\n  },\n  header: {\n    flex: 1,\n    paddingTop: 20,\n  },\n  item: {\n    flex: 1,\n    maxHeight: ITEM_HEIGHT,\n  },\n});\n","import React from \"react\";\nimport {\n  KeyboardAvoidingView,\n  SafeAreaView,\n  StyleSheet,\n  View,\n} from \"react-native\";\nimport { List, Subheading } from \"react-native-paper\";\nimport { StatusBar } from \"expo-status-bar\";\n\nimport BigList from \"../../lib\";\nimport data from \"../data/data.json\";\nimport Block from \"./components/Block\";\n\nexport default function SectionList() {\n  const renderItem = ({ item }) => {\n    return (\n      <List.Item\n        title={item.title}\n        description={item.description}\n        style={styles.container}\n        left={(props) => <List.Icon {...props} icon=\"account\" />}\n      />\n    );\n  };\n  const renderEmpty = () => <List.Item title=\"No items\" />;\n  const renderHeader = () => (\n    <List.Item\n      title=\"Marco Cesarato\"\n      description=\"cesarato.developer@gmail.com\"\n      style={styles.container}\n      left={(props) => <List.Icon {...props} icon=\"account\" />}\n    />\n  );\n  const renderFooter = () => (\n    <Block>\n      <Subheading>No more items available...</Subheading>\n    </Block>\n  );\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView style={styles.container}>\n        <View style={styles.compare}>\n          <BigList\n            style={styles.container}\n            data={data}\n            // Item\n            itemHeight={90}\n            renderItem={renderItem}\n            renderEmpty={renderEmpty}\n            // Header\n            headerHeight={90}\n            renderHeader={renderHeader}\n            // Footer\n            footerHeight={100}\n            renderFooter={renderFooter}\n          />\n        </View>\n        <StatusBar style=\"auto\" />\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  compare: {\n    flex: 1,\n    flexDirection: \"row\",\n  },\n  container: {\n    flex: 1,\n  },\n});\n","import React from \"react\";\nimport { KeyboardAvoidingView, SafeAreaView, StyleSheet } from \"react-native\";\nimport BigList from \"../../lib\";\nimport { Appbar, List, Subheading } from \"react-native-paper\";\nimport { StatusBar } from \"expo-status-bar\";\n\nimport sections from \"../data/sections.json\";\nimport Block from \"./components/Block\";\n\nexport default function SectionList() {\n  const renderItem = ({ item }) => {\n    return (\n      <List.Item\n        title={item.title}\n        description={item.description}\n        style={styles.container}\n        left={(props) => <List.Icon {...props} icon=\"account\" />}\n      />\n    );\n  };\n  const renderEmpty = () => <List.Item title=\"No items\" />;\n  const renderHeader = () => (\n    <List.Item\n      title=\"Marco Cesarato\"\n      description=\"cesarato.developer@gmail.com\"\n      style={styles.container}\n      left={(props) => <List.Icon {...props} icon=\"account\" />}\n    />\n  );\n  const renderFooter = () => (\n    <Block>\n      <Subheading>No more items available...</Subheading>\n    </Block>\n  );\n  const renderSectionHeader = (section) => (\n    <Appbar style={styles.header}>\n      <Appbar.Content\n        style={styles.headerContent}\n        title={\"Section \" + (section + 1)}\n        subtitle=\"Below are listed all section items\"\n      />\n    </Appbar>\n  );\n  const renderSectionFooter = (section) => (\n    <Block>\n      <Subheading>Footer Section {section}</Subheading>\n    </Block>\n  );\n  return (\n    <SafeAreaView style={styles.container}>\n      <KeyboardAvoidingView style={styles.container}>\n        <BigList\n          style={styles.container}\n          sections={sections}\n          // Item\n          itemHeight={90}\n          renderItem={renderItem}\n          renderEmpty={renderEmpty}\n          // Header\n          headerHeight={90}\n          renderHeader={renderHeader}\n          // Footer\n          footerHeight={100}\n          renderFooter={renderFooter}\n          // Section\n          sectionHeaderHeight={75}\n          renderSectionHeader={renderSectionHeader}\n          // Section footer\n          sectionFooterHeight={60}\n          renderSectionFooter={renderSectionFooter}\n        />\n        <StatusBar style=\"auto\" />\n      </KeyboardAvoidingView>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  header: { elevation: 0, height: 50 },\n  headerContent: { alignItems: \"center\", height: 50, justifyContent: \"center\" },\n});\n","import React, { useState } from \"react\";\nimport { Platform, StyleSheet, View } from \"react-native\";\nimport {\n  Appbar,\n  Paragraph,\n  RadioButton,\n  TouchableRipple,\n  useTheme,\n} from \"react-native-paper\";\n\nimport ColumnsList from \"./lists/ColumnsList\";\nimport CompareList from \"./lists/CompareList\";\nimport List from \"./lists/List\";\nimport SectionList from \"./lists/SectionList\";\n\nconst Home = () => {\n  const {\n    colors: { background, surface },\n  } = useTheme();\n  const [checked, setChecked] = useState(\"standard\");\n  const [insetBottom, setInsetBottom] = useState(0);\n  return (\n    <View\n      style={[\n        styles.container,\n        {\n          backgroundColor: background,\n          paddingBottom: insetBottom + 205,\n        },\n      ]}\n    >\n      <Appbar.Header style={[styles.header, { height: 75 }]}>\n        <Appbar.Content title=\"BigList Example\" subtitle=\"10.000 items\" />\n      </Appbar.Header>\n      <View\n        style={[styles.containerBottom, { backgroundColor: surface }]}\n        onLayout={(event) => {\n          setInsetBottom(event.height || 0);\n        }}\n      >\n        <RadioButton.Group\n          onValueChange={(newValue) => setChecked(newValue)}\n          value={checked}\n        >\n          <TouchableRipple onPress={() => setChecked(\"standard\")}>\n            <View style={styles.row}>\n              <Paragraph>Standard List</Paragraph>\n              <View pointerEvents=\"none\">\n                <RadioButton.Android value=\"standard\" />\n              </View>\n            </View>\n          </TouchableRipple>\n          <TouchableRipple onPress={() => setChecked(\"columns\")}>\n            <View style={styles.row}>\n              <Paragraph>Columns List</Paragraph>\n              <View pointerEvents=\"none\">\n                <RadioButton.Android value=\"columns\" />\n              </View>\n            </View>\n          </TouchableRipple>\n          <TouchableRipple onPress={() => setChecked(\"section\")}>\n            <View style={styles.row}>\n              <Paragraph>Section List</Paragraph>\n              <View pointerEvents=\"none\">\n                <RadioButton.Android value=\"section\" />\n              </View>\n            </View>\n          </TouchableRipple>\n          <TouchableRipple onPress={() => setChecked(\"compare\")}>\n            <View style={styles.row}>\n              <Paragraph>Compare with FlatList</Paragraph>\n              <View pointerEvents=\"none\">\n                <RadioButton.Android value=\"compare\" />\n              </View>\n            </View>\n          </TouchableRipple>\n        </RadioButton.Group>\n      </View>\n      {checked === \"standard\" ? (\n        <List />\n      ) : checked === \"columns\" ? (\n        <ColumnsList />\n      ) : checked === \"section\" ? (\n        <SectionList />\n      ) : checked === \"compare\" ? (\n        <CompareList />\n      ) : null}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    position: \"relative\",\n    ...Platform.select({ web: { maxHeight: \"100vh\" }, default: {} }),\n  },\n  containerBottom: {\n    bottom: 0,\n    elevation: 999,\n    left: 0,\n    position: \"absolute\",\n    width: \"100%\",\n    zIndex: 999,\n  },\n  header: {\n    elevation: 0,\n    marginBottom: Platform.select({ web: 0, default: -5 }),\n  },\n  row: {\n    alignItems: \"center\",\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    paddingHorizontal: 16,\n    paddingVertical: 8,\n  },\n});\n\nexport default Home;\n","import React from \"react\";\nimport { Provider as PaperProvider } from \"react-native-paper\";\n\nimport Home from \"./src/Home\";\n\nexport default function App() {\n  return (\n    <PaperProvider>\n      <Home />\n    </PaperProvider>\n  );\n}\n"],"sourceRoot":""}